#!/usr/bin/env python3

import os
import sys
import subprocess
import argparse
import distutils.dir_util as dir_util

parser = argparse.ArgumentParser(description='Build the Elastor.Trinity project.',
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('target', metavar='TARGET', choices=['all', 'clean', 'launcher', "runtime"],
                    help='Specify the target to build.\nPossible values are "all", "clean", "launcher" and "runtime".')

args = parser.parse_args()

SCRIPT_PATH=os.path.realpath(__file__)
TOOLCHAINS_DIR_PATH=os.path.dirname(os.path.dirname(SCRIPT_PATH))
TOOLCHAINS_DIR_NAME=os.path.basename(TOOLCHAINS_DIR_PATH)
PROJECT_DIR_PATH=os.path.join(TOOLCHAINS_DIR_PATH, "..")
RUNTIME_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "Runtime")
LAUNCHER_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "Launcher")

def run_cmd(cmd, ignore_error=False):
    print("Running: " + cmd)
    ret = subprocess.call(cmd, shell=True)
    if not ignore_error and ret != 0:
        sys.exit(ret)

def remove_tree(directory):
    print("Removing: " + directory)
    if os.path.isdir(directory):
        dir_util.remove_tree(directory)

def copy_tree(src, dst):
    print("Copying " + src + " To " + dst)
    dir_util.copy_tree(src, dst)

if TOOLCHAINS_DIR_NAME != "ToolChains" or \
   not os.path.isdir(RUNTIME_DIR_PATH) or \
   not os.path.isdir(LAUNCHER_DIR_PATH):
    print('Error: You should "git clone" the "Elastos.Triniy" project with "--recurse-submodules" option.')
    print('       And run the script within the "ToolChains/bin" directory of the project.')
    sys.exit(1)

if args.target == "clean":
    os.chdir(PROJECT_DIR_PATH)
    remove_tree("Launcher/www")
    remove_tree("Launcher/node_modules")
    remove_tree("Launcher/.sourcemaps")
    remove_tree("Runtime/node_modules")
    remove_tree("Runtime/origin_platforms")
    remove_tree("Runtime/platforms")
    remove_tree("Runtime/plugins")

if args.target == "launcher" or args.target == "all":
    os.chdir(LAUNCHER_DIR_PATH)
    run_cmd("npm install")
    run_cmd("ionic build --prod")

if args.target == "all":
    os.chdir(PROJECT_DIR_PATH)
    copy_tree("Launcher/demos", "Runtime/www/built-in/")
    copy_tree("Launcher/www", "Runtime/www/launcher/")

if args.target == "runtime" or args.target == "all":
    os.chdir(RUNTIME_DIR_PATH)
    run_cmd("cordova prepare", ignore_error=True)

print("Done")
