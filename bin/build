#!/usr/bin/env python

import os
import sys
import subprocess
import argparse
import distutils.dir_util as dir_util

parser = argparse.ArgumentParser(description='Build the Elastor.Trinity project.',
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('target', metavar='TARGET', choices=['all', 'clean', 'launcher', "runtime", "dapp"],
                    help='Specify the target to build.\nPossible values are "all", "clean", "launcher", "runtime" and "dapp".')

args = parser.parse_args()

SCRIPT_PATH=os.path.realpath(__file__)
TOOLCHAINS_DIR_PATH=os.path.dirname(os.path.dirname(SCRIPT_PATH))
TOOLCHAINS_DIR_NAME=os.path.basename(TOOLCHAINS_DIR_PATH)
PROJECT_DIR_PATH=os.path.join(TOOLCHAINS_DIR_PATH, "..")
RUNTIME_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "Runtime")
LAUNCHER_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "Launcher")
DAPPS_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "Dapps")
IONIC_DIR_PATH=os.path.join(DAPPS_DIR_PATH, "Ionic")
BUILD_IN_DIR_PATH=os.path.join(RUNTIME_DIR_PATH, "www/built-in")

def run_cmd(cmd, ignore_error=False):
    print("Running: " + cmd)
    ret = subprocess.call(cmd, shell=True)
    if not ignore_error and ret != 0:
        sys.exit(ret)

def remove_tree(directory):
    print("Removing: " + directory)
    if os.path.isdir(directory):
        dir_util.remove_tree(directory)

def copy_tree(src, dst):
    print("Copying " + src + " To " + dst)
    dir_util.copy_tree(src, dst)

def add_fabric():
    api_key = os.getenv("FABRIC_API_KEY");
    api_secret = os.getenv("FABRIC_API_SECRET");
    if api_key is None or api_key.strip()=="":
        print("FABRIC_API_KEY not set!")
        return
    if api_secret is None or api_secret.strip()=="":
        print("FABRIC_API_SECRET not set!")
        return

    cmd="cordova plugin add cordova-fabric-plugin --variable FABRIC_API_KEY=%s --variable FABRIC_API_SECRET=%s" % (api_key, api_secret)
    run_cmd(cmd)

if TOOLCHAINS_DIR_NAME != "ToolChains" or \
   not os.path.isdir(RUNTIME_DIR_PATH) or \
   not os.path.isdir(LAUNCHER_DIR_PATH):
    print('Error: You should "git clone" the "Elastos.Triniy" project with "--recurse-submodules" option.')
    print('       And run the script within the "ToolChains/bin" directory of the project.')
    sys.exit(1)

if args.target == "clean":
    os.chdir(PROJECT_DIR_PATH)
    remove_tree("Launcher/www")
    remove_tree("Launcher/node_modules")
    remove_tree("Launcher/.sourcemaps")
    remove_tree("Runtime/node_modules")
    remove_tree("Runtime/origin_platforms")
    remove_tree("Runtime/origin_plugins")
    remove_tree("Runtime/platforms")
    remove_tree("Runtime/plugins")
    remove_tree("Runtime/www")
    remove_tree("Plugins/QRScanner/node_modules")
    remove_tree("Plugins/Carrier/src/ios/libs/ElastosCarrierSDK.framework")
    remove_tree("Plugins/Hive/src/ios/libs")

    os.chdir(IONIC_DIR_PATH)
    dirs = os.listdir(IONIC_DIR_PATH)
    for dir in dirs:
        if not os.path.isfile(dir):
            remove_tree(dir + "/www")
            remove_tree(dir + "/node_modules")

if args.target == "launcher" or args.target == "all":
    os.chdir(LAUNCHER_DIR_PATH)
    run_cmd("npm install")
    run_cmd("ionic build --prod")

if args.target == "dapp" or args.target == "all" or args.target == "runtime":
    os.chdir(DAPPS_DIR_PATH)
    copy_tree("Url", BUILD_IN_DIR_PATH)
    dirs = os.listdir(IONIC_DIR_PATH)
    for dir in dirs:
        if not os.path.isfile(dir):
            print("Building dapp: " + dir)
            os.chdir(os.path.join(IONIC_DIR_PATH, dir))
            run_cmd("npm install")
            run_cmd("ionic build --prod")
            copy_tree("www", BUILD_IN_DIR_PATH + "/org.elastos.trinity.dapp." + dir.lower())

if args.target == "all":
    os.chdir(PROJECT_DIR_PATH)
    #copy_tree("Launcher/demos", "Runtime/www/built-in/")
    copy_tree("Launcher/www", "Runtime/www/launcher/")

if args.target == "runtime":
    os.chdir(RUNTIME_DIR_PATH)
    copy_tree("samples/dapp_demos", "www/built-in/")
    copy_tree("samples/install-files", "www/install-files/")
    copy_tree("samples/launcher_demo", "www/launcher_demo/")

if args.target == "runtime" or args.target == "all":
    os.chdir(RUNTIME_DIR_PATH)
    copy_tree("www_files", "www")
    run_cmd("cordova prepare")
    add_fabric()
    run_cmd("cordova build android")

print("Done")
