#!/usr/bin/env bash
set -e

while getopts ":p:u:h" opt; do
  case $opt in
    h)
      echo "Usage:"
      echo "    run.sh -h                  Display this help message."
      echo "    run.sh -p                  Absolute path of the capsule"
      echo "    run.sh -u[yes|no]          Whether or not to first update the system"
      exit 0
    ;;
    p) ABSOLUTE_PATH="$OPTARG"
    ;;
    u) UPDATE="$OPTARG"
    ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
    ;;
  esac
done

if [ -z "${ABSOLUTE_PATH}" ]
then
  echo "You must pass in the path of your capsule with '-p' flag"
  exit 1
else
  APP=$(basename ${ABSOLUTE_PATH})
fi

CURRENT_DIR=$(pwd)
TMP_DIR=`mktemp -d`
WORK_DIR="${HOME}/.trinity-native"

function stop_script () {
  ERROR=$1
  if [ ! -z "${ERROR}" ]
  then
    echo "Encountered an error: ${ERROR}"
    echo "Exiting..."
  else
    echo 'Cleaning up and exiting...'
  fi
  rm -rf ${TMP_DIR} 
  exit 1
}
trap stop_script EXIT

function setup_python3 () {
  echo "Checking whether Python3 is installed..."
  if [[ "$(python3 -V)" =~ "Python 3" ]]
  then
    echo "Found Python3"
  else
    echo "Python3 is not installed on this system. Installing python3..."
    case `uname` in
      Linux )
        sudo apt-get install python3.8 python3-pip -y || stop_script "Cannot install python3"
      ;;
      Darwin )
        brew install sashkab/python/python@3.8 || stop_script "Cannot install python3"
        ln -s /usr/local/opt/python@3.8/bin/python3.8 /usr/local/bin/python3.8
      ;;
    esac
  fi

  echo "Using $(python3 -V) for build"
  export PATH="${PATH}:${HOME}/.local/bin"
}

function setup_openjdk8 () {
  echo "Checking whether OpenJDK8 is installed..."
  found_jdk8="yes"
  if [[ $(type -p java) ]]
  then
    echo "Found OpenJDK8 on PATH"
    _java=java
  elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]]
  then
    echo "Found OpenJDK8 on JAVA_HOME"
    _java="$JAVA_HOME/bin/java"
  else
    found_jdk8="no"
    echo "OpenJDK8 is not installed on this system. Installing OpenJDK8..."
  fi

  if [[ "$_java" ]]
  then
    version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
    if [[ "$version" > "1.8" ]]
    then
      echo "Using Java ${version} for build"
    else       
      found_jdk8="no"
      echo "Found incompatible OpenJDK version: ${version}. Installing OpenJDK8"
    fi
  fi

  if [[ $(echo ${found_jdk8}) == "no" ]]
  then
    case `uname` in
      Linux )
        sudo apt-get install openjdk-8-jdk -y || stop_script "Cannot install openjdk8"
        java_home_path="/usr/lib/jvm/java-8-openjdk-amd64"
      ;;
      Darwin )
        brew tap AdoptOpenJDK/openjdk || stop_script "Cannot install openjdk8"
        brew cask install adoptopenjdk8 || stop_script "Cannot install openjdk8"
        java_home_path="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home"
      ;;
    esac

    echo "Setting up JAVA_HOME and adding it to PATH"
    EXIST_ON_BASHPROFILE=$(cat ${HOME}/.bash_profile | grep "JAVA_HOME PATH added by Elastos.Trinity Toolchain")
    if [ -z "${EXIST_ON_BASHPROFILE}" ]
    then
      printf "\n# JAVA_HOME PATH added by Elastos.Trinity Toolchain Build Process\nexport JAVA_HOME=${java_home_path}\n" >> ${HOME}/.bash_profile
    fi
    source ${HOME}/.bash_profile
    echo "Using Java $(java -version) for build"
  fi
}

function setup_nodejs () {
  echo "Checking whether NodeJS is installed..."
  found_nodejs="yes"
  if [[ $(type -p node) ]]
  then
    echo "Found NodeJS"
    _node=node
  else
    found_nodejs="no"
    echo "NodeJS is not installed on this system. Installing NodeJS..."
  fi

  if [[ "$_node" ]]
  then
    version=$("$_node" -v 2>&1 | awk -F 'v' '/v/ {print $2}' | awk -F '.' '/./ {print $1}')
    if [[ "$version" > "11" && "$version" < "13" ]]
    then
      echo "Using NodeJS ${version} and Npm $(npm -v) for build"
    else       
      found_nodejs="no"
      echo "Found incompatible NodeJS version: ${version}. Installing NodeJS 12.x"
    fi
  fi

  if [[ $(echo ${found_nodejs}) == "no" ]]
  then
    case `uname` in
      Linux )
        curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
        sudo apt-get install -y nodejs || stop_script "Cannot install NodeJS"
      ;;
      Darwin )
        brew rm node
        brew install node@12 || stop_script "Cannot install NodeJS"
        export PATH="${PATH}:/usr/local/opt/node@12/bin"
        EXIST_ON_BASHPROFILE=$(cat ${HOME}/.bash_profile | grep "NodeJS 12 PATH added by Elastos.Trinity Toolchain")
        if [ -z "${EXIST_ON_BASHPROFILE}" ]
        then
          printf "\n# NodeJS 12 PATH added by Elastos.Trinity Toolchain Build Process\n" >> ${HOME}/.bash_profile
          echo 'export PATH="${PATH}:/usr/local/opt/node@12/bin"' >> ${HOME}/.bash_profile
        fi   
        source ${HOME}/.bash_profile
    
      ;;
    esac
    echo "Using NodeJS $(node -v) and Npm $(npm -v) for build"
  fi
  echo "Setting up Npm path at ${HOME}/.npm-global and adding it to PATH temporarily"
  mkdir -p ${HOME}/.npm-global/lib
  npm config set prefix "${HOME}/.npm-global"
  export PATH="${PATH}:${HOME}/.npm-global/bin"
}

function setup_android_sdkmanager () {
  READLINK=$1
  SED=$2
  echo "Checking whether Android Sdkmanager is installed..."
  found_sdkmanager="yes"
  if [[ $(type -p sdkmanager) ]]
  then
    echo "Found Android Sdkmanager"
    if [ "$(uname)" == "Linux" ]
    then 
      prefix=""
    else
      prefix="cmdline-"
    fi 
    export ANDROID_SDK_ROOT=$(echo $(${READLINK} -f $(which sdkmanager)) | ${SED} "s#/cmdline-tools/${prefix}/bin/sdkmanager##g")
  else
    found_sdkmanager="no"
    echo "Android Sdkmanager is not installed on this system. Installing Android Sdkmanager at ${HOME}/android/android-sdk..."   
  fi

  if [[ $(echo ${found_sdkmanager}) == "no" ]]
  then
    rm -rf ${HOME}/android/android-sdk
    mkdir -p ${HOME}/android/android-sdk   
    if [ "$(uname)" == "Linux" ]
    then 
      file_name="commandlinetools-linux-6858069_latest.zip"
    else
      file_name="commandlinetools-mac-6858069_latest.zip"
    fi
    wget https://dl.google.com/android/repository/${file_name} -P ${TMP_DIR} || stop_script "Cannot download Android Sdkmanager"
    yes | unzip -d ${HOME}/android/android-sdk/cmdline-tools ${TMP_DIR}/${file_name} || stop_script "Cannot install Android Sdkmanager"
    echo "Setting up ANDROID_SDK_ROOT and adding it to PATH"
    echo "export ANDROID_SDK_ROOT=${HOME}/android/android-sdk"
    export ANDROID_SDK_ROOT=${HOME}/android/android-sdk
    echo "export ANDROID_HOME=${HOME}/android/android-sdk"
    export ANDROID_HOME=${HOME}/android/android-sdk
    export PATH="${PATH}:${ANDROID_SDK_ROOT}/${android_cmdline_path}"
    EXIST_ON_BASHPROFILE=$(cat ${HOME}/.bash_profile | grep "ANDROID_SDK_ROOT PATH added by Elastos.Trinity Toolchain")
    if [ -z "${EXIST_ON_BASHPROFILE}" ]
    then
      printf "\n# ANDROID_SDK_ROOT PATH added by Elastos.Trinity Toolchain Build Process\nexport ANDROID_SDK_ROOT=${HOME}/android/android-sdk\n" >> ${HOME}/.bash_profile
      echo "export ANDROID_HOME=${HOME}/android/android-sdk" >> ${HOME}/.bash_profile
      echo 'export PATH="${PATH}:${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools/bin"' >> ${HOME}/.bash_profile
    fi   
    source ${HOME}/.bash_profile
  fi  

  echo "Using Android Sdkmanager $(sdkmanager --version) for build"

  # Install Android Build Tools, Platform Tools and NDK"
  yes | sdkmanager                            \
      "build-tools;28.0.3" "platform-tools" "platforms;android-28" "ndk;21.3.6528147" &&          \
  yes | sdkmanager --licenses 
  wait
}

function setup_android_gradle () {
  READLINK=$1
  SED=$2
  echo "Checking whether Android Gradle is installed..."
  found_gradle="yes"
  if [[ $(type -p gradle) ]]
  then
    echo "Found Android Gradle"
    _gradle=gradle
  else
    found_gradle="no"
    echo "Android Gradle is not installed on this system. Installing Android Gradle at ${HOME}/android/gradle..."   
  fi

  if [[ "$_gradle" ]]
  then
    version=$("$_gradle" --version 2>&1 | awk -F 'Gradle ' '/Gradle/ {print $2}')
    if [[ "$version" > "4" ]]
    then
      echo "Using Android Gradle ${version} for build"
      export GRADLE_HOME=$(echo $(${READLINK} -f $(which gradle)) | ${SED} 's#/bin/gradle##g')
    else       
      found_gradle="no"
      echo "Found incompatible Android Gradle version: ${version}. Installing Android Gradle"
    fi
  fi

  if [[ $(echo ${found_gradle}) == "no" ]]
  then
    mkdir -p ${HOME}/android
    rm -rf ${HOME}/android/gradle
    wget https://services.gradle.org/distributions/gradle-6.7-bin.zip -P ${TMP_DIR} || stop_script "Cannot download Android Gradle"
    yes | unzip -d ${HOME}/android ${TMP_DIR}/gradle-6.7-bin.zip || stop_script "Cannot install Android Gradle"
    mv ${HOME}/android/gradle-6.7 ${HOME}/android/gradle
    echo "Setting up GRADLE_HOME and adding it to PATH" 
    echo "export GRADLE_HOME=${HOME}/android/gradle"
    export GRADLE_HOME=${HOME}/android/gradle   
    export PATH="${PATH}:${GRADLE_HOME}/bin"
    EXIST_ON_BASHPROFILE=$(cat ${HOME}/.bash_profile | grep "GRADLE_HOME PATH added by Elastos.Trinity Toolchain")
    if [ -z "${EXIST_ON_BASHPROFILE}" ]
    then
      printf "\n# GRADLE_HOME PATH added by Elastos.Trinity Toolchain Build Process\nexport GRADLE_HOME=${HOME}/android/gradle\n" >> ${HOME}/.bash_profile
      echo 'export PATH="${PATH}:${GRADLE_HOME}/bin"' >> ${HOME}/.bash_profile
    fi    
    source ${HOME}/.bash_profile 
    echo "Using Android Gradle $(gradle --version) for build"                               
  fi
}

function preinstall () {
  echo "Installing basic dependencies and tools..."
  # Update the package manager and install the essential build tools
  case `uname` in
    Linux )
      if [ "${UPDATE}" == "yes" ]
      then
        sudo apt autoremove -y
        sudo apt-get update -y
      fi
      sudo apt-get install build-essential wget curl -y || stop_script "Cannot install basic dependencies"
      READLINK=$(which readlink)
      SED=$(which sed)
    ;;
    Darwin )
      if [ "${UPDATE}" == "yes" ]
      then
        brew cleanup
        brew update
        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
      fi
      brew install coreutils gnu-sed wget curl || stop_script "Cannot install basic dependencies"
      READLINK=$(which greadlink)
      SED=$(which gsed)
    ;;
    *)
      echo "This script can only run on Linux or Darwin machines. Exiting..."
      exit 1
    ;;
  esac
}

function install_dependencies () {
  echo "Setting up python virtual environment at ${HOME}/.venv"
  pip3 install --user virtualenv
  virtualenv -p `which python3` ${HOME}/.venv
  source ${HOME}/.venv/bin/activate
  pip install --upgrade pip

  echo "Installing npm dependencies..."
  rm -rf ${HOME}/.npm-global/lib/node_modules
  npm install -g                                          \
    cordova@10.0.0                                        \
    cordova-res@0.15.1                                    \
    cordova-ios@5.1.1                                     \
      @ionic/cli@6.12.1                                   \
      typescript@4.0.5                                    \
      @elastosfoundation/trinity-cli  || stop_script "Cannot install npm dependencies"

  echo "Cloning Elastos.Trinity github repository..."
  if [ ! -d "${WORK_DIR}/Elastos.Trinity" ]
  then 
    mkdir -p ${WORK_DIR} 
    git clone --recurse-submodules -j8 https://github.com/elastos/Elastos.Trinity.git ${WORK_DIR}/Elastos.Trinity
  else 
    cd ${WORK_DIR}/Elastos.Trinity
    rm -rf Dapps Launcher Plugins Runtime ToolChains
    git submodule update --recursive
  fi 
  cd ${WORK_DIR}/Elastos.Trinity && ./synccode.sh

  echo "Installing python dependencies..."
  case `uname` in
    Linux )
      pip install -r ${WORK_DIR}/Elastos.Trinity/ToolChains/native/tools/requirements.txt 
    ;;
    Darwin )
      ARCHFLAGS="-Wno-error=unused-command-line-argument-hard-error-in-future" pip install -r ${WORK_DIR}/Elastos.Trinity/ToolChains/native/tools/requirements.txt 
    ;;
  esac
}

function setup_env () {
  # This is to handle an edge-case if the script is re-run twice without manually sourcing 
  # ~/.bash_profile after installing different dependencies
  source ${HOME}/.bash_profile

  preinstall  
  setup_python3
  setup_openjdk8
  setup_nodejs
  setup_android_sdkmanager ${READLINK} ${SED}
  setup_android_gradle ${READLINK} ${SED}
  install_dependencies

  # TODO: Need to find a good solution for this rather than just hard-coding the removal of the lines 
  ${SED} -i'' '/The app manifest must contain the application DID string to be able to secure intents/,+4 d' ${WORK_DIR}/Elastos.Trinity/ToolChains/native/bin/build_from_source
}

setup_env || stop_script "Could not successfully setup the environment"
cd ${WORK_DIR}/Elastos.Trinity/ToolChains/native/bin/
yes no | python ./build_from_source --app ${ABSOLUTE_PATH}

retVal=$?
if [ $retVal -eq 0 ]; then
  echo "Your app package has been generated at ${ABSOLUTE_PATH}/native-out/app-debug.apk"
else
  echo "Error: Your app package could not be generated. Please try again"
fi
